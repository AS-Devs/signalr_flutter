// Autogenerated from Pigeon (v1.0.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.asdevs.signalr_flutter;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class SignalrApi {

  public enum Transport {
    auto(0),
    serverSentEvents(1),
    longPolling(2);

    private int index;
    private Transport(final int index) {
      this.index = index;
    }
  }

  public enum ConnectionStatus {
    connecting(0),
    connected(1),
    reconnecting(2),
    disconnected(3),
    connectionSlow(4),
    connectionError(5);

    private int index;
    private ConnectionStatus(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConnectionOptions {
    private String baseUrl;
    public String getBaseUrl() { return baseUrl; }
    public void setBaseUrl(String setterArg) { this.baseUrl = setterArg; }

    private String hubName;
    public String getHubName() { return hubName; }
    public void setHubName(String setterArg) { this.hubName = setterArg; }

    private String queryString;
    public String getQueryString() { return queryString; }
    public void setQueryString(String setterArg) { this.queryString = setterArg; }

    private List<String> hubMethods;
    public List<String> getHubMethods() { return hubMethods; }
    public void setHubMethods(List<String> setterArg) { this.hubMethods = setterArg; }

    private Map<String, String> headers;
    public Map<String, String> getHeaders() { return headers; }
    public void setHeaders(Map<String, String> setterArg) { this.headers = setterArg; }

    private Transport transport;
    public Transport getTransport() { return transport; }
    public void setTransport(Transport setterArg) { this.transport = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("baseUrl", baseUrl);
      toMapResult.put("hubName", hubName);
      toMapResult.put("queryString", queryString);
      toMapResult.put("hubMethods", hubMethods);
      toMapResult.put("headers", headers);
      toMapResult.put("transport", transport.index);
      return toMapResult;
    }
    static ConnectionOptions fromMap(Map<String, Object> map) {
      ConnectionOptions fromMapResult = new ConnectionOptions();
      Object baseUrl = map.get("baseUrl");
      fromMapResult.baseUrl = (String)baseUrl;
      Object hubName = map.get("hubName");
      fromMapResult.hubName = (String)hubName;
      Object queryString = map.get("queryString");
      fromMapResult.queryString = (String)queryString;
      Object hubMethods = map.get("hubMethods");
      fromMapResult.hubMethods = (List<String>)hubMethods;
      Object headers = map.get("headers");
      fromMapResult.headers = (Map<String, String>)headers;
      Object transport = map.get("transport");
      fromMapResult.transport = Transport.values()[(int)transport];
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StatusChangeResult {
    private String connectionId;
    public String getConnectionId() { return connectionId; }
    public void setConnectionId(String setterArg) { this.connectionId = setterArg; }

    private ConnectionStatus status;
    public ConnectionStatus getStatus() { return status; }
    public void setStatus(ConnectionStatus setterArg) { this.status = setterArg; }

    private String errorMessage;
    public String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(String setterArg) { this.errorMessage = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("connectionId", connectionId);
      toMapResult.put("status", status.index);
      toMapResult.put("errorMessage", errorMessage);
      return toMapResult;
    }
    static StatusChangeResult fromMap(Map<String, Object> map) {
      StatusChangeResult fromMapResult = new StatusChangeResult();
      Object connectionId = map.get("connectionId");
      fromMapResult.connectionId = (String)connectionId;
      Object status = map.get("status");
      fromMapResult.status = ConnectionStatus.values()[(int)status];
      Object errorMessage = map.get("errorMessage");
      fromMapResult.errorMessage = (String)errorMessage;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class SignalRHostApiCodec extends StandardMessageCodec {
    public static final SignalRHostApiCodec INSTANCE = new SignalRHostApiCodec();
    private SignalRHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ConnectionOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ConnectionOptions) {
        stream.write(128);
        writeValue(stream, ((ConnectionOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface SignalRHostApi {
    void connect(ConnectionOptions connectionOptions, Result<String> result);
    void reconnect(Result<String> result);
    void stop(Result<Void> result);
    void isConnected(Result<Boolean> result);
    void invokeMethod(String methodName, List<String> arguments, Result<String> result);

    /** The codec used by SignalRHostApi. */
    static MessageCodec<Object> getCodec() {
      return SignalRHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `SignalRHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, SignalRHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SignalRHostApi.connect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ConnectionOptions connectionOptionsArg = (ConnectionOptions)args.get(0);
              if (connectionOptionsArg == null) {
                throw new NullPointerException("connectionOptionsArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.connect(connectionOptionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SignalRHostApi.reconnect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.reconnect(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SignalRHostApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.stop(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SignalRHostApi.isConnected", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.isConnected(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SignalRHostApi.invokeMethod", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String methodNameArg = (String)args.get(0);
              if (methodNameArg == null) {
                throw new NullPointerException("methodNameArg unexpectedly null.");
              }
              List<String> argumentsArg = (List<String>)args.get(1);
              if (argumentsArg == null) {
                throw new NullPointerException("argumentsArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.invokeMethod(methodNameArg, argumentsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class SignalRPlatformApiCodec extends StandardMessageCodec {
    public static final SignalRPlatformApiCodec INSTANCE = new SignalRPlatformApiCodec();
    private SignalRPlatformApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return StatusChangeResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof StatusChangeResult) {
        stream.write(128);
        writeValue(stream, ((StatusChangeResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class SignalRPlatformApi {
    private final BinaryMessenger binaryMessenger;
    public SignalRPlatformApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return SignalRPlatformApiCodec.INSTANCE;
    }

    public void onStatusChange(StatusChangeResult statusChangeResultArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SignalRPlatformApi.onStatusChange", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(statusChangeResultArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onNewMessage(String hubNameArg, String messageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SignalRPlatformApi.onNewMessage", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(hubNameArg, messageArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
